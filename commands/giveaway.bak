const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { db } = require('../database');
const { ADMIN_ROLE_IDS, LOG_CHANNEL_ID, PANEL_DOMAIN } = require('../config');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('giveawaystart')
        .setDescription('Starte ein neues Giveaway (Admin)')
        .addStringOption(option =>
            option.setName('name')
                .setDescription('Name des Giveaways')
                .setRequired(true))
        .addSubcommand(subcommand =>
            subcommand.setName('enter')
                .setDescription('Nimm am aktuellen Giveaway teil'))
        .addSubcommand(subcommand =>
            subcommand.setName('draw')
                .setDescription('Ziehe Gewinner aus dem aktuellen Giveaway (Admin)')
                .addIntegerOption(option =>
                    option.setName('count')
                        .setDescription('Anzahl der Gewinner')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand.setName('claim')
                .setDescription('Beanspruche deinen Gewinn aus einem Giveaway und wähle einen Server aus'))
        .addSubcommand(subcommand =>
            subcommand.setName('grant')
                .setDescription('Erstelle als Admin einen Giveaway-Server für einen Nutzer')
                .addStringOption(option =>
                    option.setName('userid')
                        .setDescription('Discord User ID des Nutzers')
                        .setRequired(true))),
    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand(false);
        const userId = interaction.user.id;
        const guildId = interaction.guildId;

        // Helper to check admin role
        const member = interaction.member;
        const hasAdminRole = member.roles.cache.some(role => ADMIN_ROLE_IDS.includes(role.id));

        if (interaction.commandName === 'giveawaystart' || subcommand === 'start') {
            if (!hasAdminRole) {
                await interaction.reply({ content: '❌ Du hast keine Berechtigung, diesen Befehl zu verwenden.', ephemeral: true });
                return;
            }
            const giveawayName = interaction.options.getString('name');
            // Deactivate existing active giveaways
            db.run('UPDATE giveaways SET is_active = 0 WHERE guild_id = ? AND is_active = 1', [guildId], (err) => {
                if (err) {
                    console.error('Failed to deactivate existing giveaways:', err.message);
                }
            });
            // Insert new giveaway
            db.run('INSERT INTO giveaways (guild_id, name, is_active) VALUES (?, ?, 1)', [guildId, giveawayName], function (err) {
                if (err) {
                    console.error('Failed to create giveaway:', err.message);
                    interaction.reply({ content: '❌ Fehler beim Erstellen des Giveaways.', ephemeral: true });
                    return;
                }
                interaction.reply({ content: `✅ Giveaway "${giveawayName}" wurde gestartet! Benutzer können jetzt teilnehmen.`, ephemeral: true });
            });
            return;
        }

        if (subcommand === 'enter') {
            // Get active giveaway
            db.get('SELECT * FROM giveaways WHERE guild_id = ? AND is_active = 1', [guildId], (err, giveaway) => {
                if (err) {
                    console.error('Failed to fetch active giveaway:', err.message);
                    interaction.reply({ content: '❌ Fehler beim Abrufen des Giveaways.', ephemeral: true });
                    return;
                }
                if (!giveaway) {
                    interaction.reply({ content: '⚠️ Es gibt kein aktives Giveaway.', ephemeral: true });
                    return;
                }
                // Check if user already entered
                db.get('SELECT * FROM giveaway_participants WHERE giveaway_id = ? AND discord_user_id = ?', [giveaway.id, userId], (err2, participant) => {
                    if (err2) {
                        console.error('Failed to check giveaway participant:', err2.message);
                        interaction.reply({ content: '❌ Fehler beim Überprüfen der Teilnahme.', ephemeral: true });
                        return;
                    }
                    if (participant) {
                        interaction.reply({ content: '⚠️ Du hast bereits am Giveaway teilgenommen.', ephemeral: true });
                        return;
                    }
                    // Insert participant
                    db.run('INSERT INTO giveaway_participants (giveaway_id, discord_user_id) VALUES (?, ?)', [giveaway.id, userId], (err3) => {
                        if (err3) {
                            console.error('Failed to add giveaway participant:', err3.message);
                            interaction.reply({ content: '❌ Fehler beim Hinzufügen zur Teilnahme.', ephemeral: true });
                            return;
                        }
                        interaction.reply({ content: `✅ Du hast erfolgreich am Giveaway "${giveaway.name}" teilgenommen!`, ephemeral: true });
                    });
                });
            });
            return;
        }

        if (subcommand === 'draw') {
            if (!hasAdminRole) {
                await interaction.reply({ content: '❌ Du hast keine Berechtigung, diesen Befehl zu verwenden.', ephemeral: true });
                return;
            }
            const count = interaction.options.getInteger('count');
            // Get active giveaway
            db.get('SELECT * FROM giveaways WHERE guild_id = ? AND is_active = 1', [guildId], (err, giveaway) => {
                if (err) {
                    console.error('Failed to fetch active giveaway:', err.message);
                    interaction.reply({ content: '❌ Fehler beim Abrufen des Giveaways.', ephemeral: true });
                    return;
                }
                if (!giveaway) {
                    interaction.reply({ content: '⚠️ Es gibt kein aktives Giveaway.', ephemeral: true });
                    return;
                }
                // Get participants
                db.all('SELECT discord_user_id FROM giveaway_participants WHERE giveaway_id = ?', [giveaway.id], async (err2, participants) => {
                    if (err2) {
                        console.error('Failed to fetch giveaway participants:', err2.message);
                        interaction.reply({ content: '❌ Fehler beim Abrufen der Teilnehmer.', ephemeral: true });
                        return;
                    }
                    if (participants.length === 0) {
                        interaction.reply({ content: '⚠️ Es sind keine Teilnehmer im Giveaway.', ephemeral: true });
                        return;
                    }
                    // Shuffle and pick winners
                    const shuffled = participants.sort(() => 0.5 - Math.random());
                    const winners = shuffled.slice(0, count);
                    // Mark giveaway inactive
                    db.run('UPDATE giveaways SET is_active = 0 WHERE id = ?', [giveaway.id], (err3) => {
                        if (err3) {
                            console.error('Failed to deactivate giveaway:', err3.message);
                        }
                    });
                    // Notify winners and admin
                    const winnerMentions = winners.map(w => `<@${w.discord_user_id}>`).join(', ');
                    await interaction.reply({ content: `🎉 Die Gewinner des Giveaways "${giveaway.name}" sind: ${winnerMentions}`, ephemeral: false });
                    // Log winners
                    const logChannel = await client.channels.fetch(LOG_CHANNEL_ID).catch(() => null);
                    if (logChannel && logChannel.isTextBased()) {
                        await logChannel.send({ content: `🎉 **Giveaway "${giveaway.name}" Gewinner:**\n${winnerMentions}` });
                    }
                });
            });
            return;
        }

        if (subcommand === 'claim') {
            // Check if user is winner and not claimed
            db.get(`SELECT gp.giveaway_id, g.name FROM giveaway_participants gp
                JOIN giveaways g ON gp.giveaway_id = g.id
                WHERE gp.discord_user_id = ? AND gp.claimed = 0`, [userId], async (err, row) => {
                if (err) {
                    console.error('Database error checking giveaway claim:', err.message);
                    await interaction.reply({ content: '❌ Ein Fehler ist aufgetreten. Bitte versuche es später erneut.', ephemeral: true });
                    return;
                }
                if (!row) {
                    await interaction.reply({ content: '⚠️ Du hast keinen Gewinn zum Beanspruchen oder hast bereits beansprucht.', ephemeral: true });
                    return;
                }
                // Mark as claimed
                db.run('UPDATE giveaway_participants SET claimed = 1 WHERE giveaway_id = ? AND discord_user_id = ?', [row.giveaway_id, userId], (updateErr) => {
                    if (updateErr) {
                        console.error('Failed to mark giveaway claim:', updateErr.message);
                    }
                });
                // Increase user's max_server_limit by 1
                try {
                    const userRow = await new Promise((resolve, reject) => {
                        db.get('SELECT max_server_limit FROM user_registrations WHERE discord_user_id = ? AND guild_id = ?', [userId, guildId], (err, row) => {
                            if (err) {
                                reject(err);
                            } else {
                                resolve(row);
                            }
                        });
                    });
                    if (userRow) {
                        const newLimit = (userRow.max_server_limit || 1) + 1;
                        await new Promise((resolve, reject) => {
                            db.run('UPDATE user_registrations SET max_server_limit = ? WHERE discord_user_id = ? AND guild_id = ?', [newLimit, userId, guildId], (updateErr) => {
                                if (updateErr) {
                                    reject(updateErr);
                                } else {
                                    resolve();
                                }
                            });
                        });
                    }
                } catch (error) {
                    console.error('Error updating max_server_limit:', error);
                }
                // Show server selection buttons (reuse from /shop command)
                const pythonButton = new ButtonBuilder()
                    .setCustomId('select_server_15')
                    .setLabel('Python Server')
                    .setStyle(ButtonStyle.Primary);
                const nodeButton = new ButtonBuilder()
                    .setCustomId('select_server_18')
                    .setLabel('Node.js Server')
                    .setStyle(ButtonStyle.Primary);
                const javaButton = new ButtonBuilder()
                    .setCustomId('select_server_16')
                    .setLabel('Java Server')
                    .setStyle(ButtonStyle.Primary);
                const serverSelectionRow = new ActionRowBuilder().addComponents(pythonButton, nodeButton, javaButton);
                await interaction.reply({
                    content: `🎉 Du hast das Giveaway gewonnen! Wähle nun deinen Server aus:`,
                    components: [serverSelectionRow],
                    ephemeral: true
                });
            });
            return;
        }

        if (subcommand === 'grant') {
            if (!hasAdminRole) {
                await interaction.reply({ content: '❌ Du hast keine Berechtigung, diesen Befehl zu verwenden.', ephemeral: true });
                return;
            }
            const targetUserId = interaction.options.getString('userid');
            // Insert a giveaway server for the user (implementation depends on your server creation logic)
            // For now, just acknowledge the command
            await interaction.reply({ content: `✅ Giveaway-Server für Nutzer <@${targetUserId}> wurde erstellt (Platzhalter).`, ephemeral: true });
            return;
        }
    }
};
